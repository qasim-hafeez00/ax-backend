generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  role            Role      @default(BUYER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orders          Order[]
  reviews         Review[]
  products        Product[]
  sellerProfile   SellerProfile?
  wishlist        Wishlist?
  comparisons     ProductComparison[]
  supportTickets  SupportTicket[]
  messages        Message[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  stock       Int
  image       String?
  sellerId    String
  seller      User     @relation(fields: [sellerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  orderItems  OrderItem[]
  wishlists   Wishlist[]
  comparisons ProductComparison[]
}

model Order {
  id           String        @id @default(uuid())
  userId       String
  status       OrderStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  items        OrderItem[]
  transactions Transaction[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductComparison {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
}

model SupportTicket {
  id          String          @id @default(uuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  subject     String
  description String
  status      TicketStatus    @default(OPEN)
  priority    TicketPriority  @default(MEDIUM)
  messages    Message[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Message {
  id              String        @id @default(uuid())
  senderId        String
  sender          User          @relation(fields: [senderId], references: [id])
  content         String
  supportTicketId String?
  supportTicket   SupportTicket? @relation(fields: [supportTicketId], references: [id])
  createdAt       DateTime      @default(now())
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String
  link      String?
  active    Boolean  @default(true)
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id            String   @id @default(uuid())
  userId        String
  type          String
  provider      String
  accountNumber String
  expiryDate    DateTime?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Transaction {
  id            String           @id @default(uuid())
  orderId       String
  order         Order            @relation(fields: [orderId], references: [id])
  amount        Float
  status        TransactionStatus
  paymentMethod String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model SellerProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  companyName String
  description String?
  logo        String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

